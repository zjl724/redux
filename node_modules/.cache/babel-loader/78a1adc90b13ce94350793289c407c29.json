{"ast":null,"code":"//声明actions ： 描述了数据从应用到store的有效信息负载，是修改store的唯一途径。\n//action表示操作数据的一种行为，所以type字段必须要提供；除此之外，action中还可以提供一些额外的信息来表示数据该怎么修改。\n//要通过action来修改数据，必须把action提交给dispatch，通过diapatch来调用action从而改变数据\nconst ADD_TYPE = \"ADD\";\nconst MINUS_TYPE = \"MINUS\";\nconst CITY_TYPE = \"CHOOSECITY\"; //操作counter的action\n\nexport function add(step) {\n  return {\n    type: ADD_TYPE,\n    step: step\n  };\n}\nexport function minus() {\n  return {\n    type: MINUS_TYPE\n  };\n} //异步加1\n//一旦我们使用了redux-thunk中间件之后，就允许我们在action的创建函数中返回一个新的函数\n//此时这个返回的函数会交给redux-thunk中间件来处理，在这个返回的函数中可以发送网络请求、可以有异步操作、可以有副作用\n\nexport function addAsync() {\n  return dispatch => {\n    setTimeout(() => {\n      //在所有的中间件处理完成之后，最后总要通过dispatch()触发一个action，最后所触发的这个action就是同步数据流\n      dispatch(add(1));\n    }, 2000);\n  };\n} //操作city的action\n\nexport function chooseCity(city) {\n  return {\n    type: CITY_TYPE,\n    city\n  };\n}","map":{"version":3,"sources":["/Users/aiyongtech5/Desktop/demo03/demo/src/actions/index.js"],"names":["ADD_TYPE","MINUS_TYPE","CITY_TYPE","add","step","type","minus","addAsync","dispatch","setTimeout","chooseCity","city"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,KAAjB;AACA,MAAMC,UAAU,GAAG,OAAnB;AACA,MAAMC,SAAS,GAAG,YAAlB,C,CAEA;;AACA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmB;AACtB,SAAO;AACHC,IAAAA,IAAI,EAAEL,QADH;AAEHI,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH;AACD,OAAO,SAASE,KAAT,GAAiB;AACpB,SAAO;AACHD,IAAAA,IAAI,EAAEJ;AADH,GAAP;AAGH,C,CAED;AACA;AACA;;AACA,OAAO,SAASM,QAAT,GAAoB;AACvB,SAAOC,QAAQ,IAAE;AACbC,IAAAA,UAAU,CAAC,MAAM;AACd;AACAD,MAAAA,QAAQ,CAACL,GAAG,CAAC,CAAD,CAAJ,CAAR;AACF,KAHS,EAGP,IAHO,CAAV;AAIH,GALD;AAMH,C,CAED;;AACA,OAAO,SAASO,UAAT,CAAoBC,IAApB,EAA0B;AAC7B,SAAO;AACHN,IAAAA,IAAI,EAAEH,SADH;AAEHS,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["//声明actions ： 描述了数据从应用到store的有效信息负载，是修改store的唯一途径。\r\n//action表示操作数据的一种行为，所以type字段必须要提供；除此之外，action中还可以提供一些额外的信息来表示数据该怎么修改。\r\n//要通过action来修改数据，必须把action提交给dispatch，通过diapatch来调用action从而改变数据\r\nconst ADD_TYPE = \"ADD\"\r\nconst MINUS_TYPE = \"MINUS\"\r\nconst CITY_TYPE = \"CHOOSECITY\"\r\n\r\n//操作counter的action\r\nexport function add(step) {\r\n    return {\r\n        type: ADD_TYPE,\r\n        step: step\r\n    }\r\n}\r\nexport function minus() {\r\n    return {\r\n        type: MINUS_TYPE\r\n    }\r\n}\r\n\r\n//异步加1\r\n//一旦我们使用了redux-thunk中间件之后，就允许我们在action的创建函数中返回一个新的函数\r\n//此时这个返回的函数会交给redux-thunk中间件来处理，在这个返回的函数中可以发送网络请求、可以有异步操作、可以有副作用\r\nexport function addAsync() {\r\n    return dispatch=>{\r\n        setTimeout(() => {\r\n           //在所有的中间件处理完成之后，最后总要通过dispatch()触发一个action，最后所触发的这个action就是同步数据流\r\n           dispatch(add(1))  \r\n        }, 2000);\r\n    }\r\n}\r\n\r\n//操作city的action\r\nexport function chooseCity(city) {\r\n    return {\r\n        type: CITY_TYPE,\r\n        city\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}