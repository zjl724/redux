{"ast":null,"code":"//创建reducers : 描述了如何响应actions的变化，将actions转换为下一个state。\n// reducers是一个纯函数(函数内部的操作对函数外部不会产生任何影响)\n// 当我们通过代码dispatch(action)之后，此时就会执行这个reducers函数了，并且把dispatch(action)中的action参数传递到reducers函数\n// 注意点：\n//  1.我们需要在reducers函数返回一个全新的state，而不是修改入参的state，如果修改了就不是纯函数了\n//  2.一定到default中返回旧的state，此时可以保证我们遇到未知的action的时候也有返回值\nexport default function counter(state = 0, action) {\n  switch (action.type) {\n    case \"ADD\":\n      return state + action.step;\n\n    case \"MINUS\":\n      return state - 1;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/aiyongtech5/Desktop/demo03/demo/src/reducers/counter.js"],"names":["counter","state","action","type","step"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,OAAT,CAAiBC,KAAK,GAAG,CAAzB,EAA4BC,MAA5B,EAAoC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,KAAL;AACI,aAAOF,KAAK,GAAGC,MAAM,CAACE,IAAtB;;AACJ,SAAK,OAAL;AACI,aAAOH,KAAK,GAAG,CAAf;;AACJ;AACI,aAAOA,KAAP;AANR;AAQH","sourcesContent":["//创建reducers : 描述了如何响应actions的变化，将actions转换为下一个state。\r\n// reducers是一个纯函数(函数内部的操作对函数外部不会产生任何影响)\r\n// 当我们通过代码dispatch(action)之后，此时就会执行这个reducers函数了，并且把dispatch(action)中的action参数传递到reducers函数\r\n// 注意点：\r\n//  1.我们需要在reducers函数返回一个全新的state，而不是修改入参的state，如果修改了就不是纯函数了\r\n//  2.一定到default中返回旧的state，此时可以保证我们遇到未知的action的时候也有返回值\r\nexport default function counter(state = 0, action) {\r\n    switch (action.type) {\r\n        case \"ADD\":\r\n            return state + action.step;\r\n        case \"MINUS\":\r\n            return state - 1;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}